/*
 * Name: Smith Stackhouse
 * Date Submitted: 2/3/2020
 * Lab Section: 003
 * Assignment Name: Lab 2 - Infix to Postfix Conversion
 */

#include <string>
#include <stack>
#include <iostream>
#include <cctype>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols
int infixToPostfix(string infix[], int length, string postfix[])
{
    int endLength = 0;
    stack <string> stac;


    //test for correct number  of brackets
    int openPar = 0;
    int closePar = 0;
    for(int i = 0; i < length; i++)
    {
        if(infix[i]  == "(")
        {
            openPar = openPar + 1;
        }
        if(infix[i] == ")")
        {
            closePar = closePar + 1;
        }
    }
    if(openPar != closePar)
    {
      return 0;
    }


    for(int i = 0; i < length; i++)
    {
      //Tests for Digit
      if(isdigit(infix[i][0]) != 0)
      {
        postfix[endLength] = infix[i];
        endLength++;
      }

      //Test for Open Parenthesis
      else if(infix[i] == "(")
      {
        stac.push(infix[i]);
      }

      //Test for Addition and Subtraction Operators
      else if(infix[i] == "+" || infix[i] == "-")
      {
        while(stac.empty() == false && stac.top() != "(")
        {
          postfix[endLength] = stac.top();
          endLength++;
          stac.pop();
        }
        stac.push(infix[i]);
      }

      //Test for Multiplication and Division Operators
      else if(infix[i] == "*" || infix[i] == "/" || infix[i] == "%")
      {
        while(stac.empty() == false && stac.top() != "(" && stac.top() != "+"
        && stac.top() != "-")
        {
          postfix[endLength] = stac.top();
          endLength++;
          stac.pop();
        }
        stac.push(infix[i]);
      }

      //Test for Closed parenthesis
      else if(infix[i] == ")")
      {
        while(stac.empty() == false && stac.top() != "(")
        {
          postfix[endLength] = stac.top();
          endLength = endLength + 1;
          stac.pop();
        }
        if(stac.top() == "(")
        {
          stac.pop();
        }
      }

    } // end of larger for loop


    //Add the remaining operations in the Stack to the postfix array
    while(stac.empty() == false)
    {
      postfix[endLength] = stac.top();
      endLength = endLength + 1;
      stac.pop();
    }


    return endLength;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;



    return 0;
}
